// Mocks generated by Mockito 5.4.0 from annotations
// in trivia/test/unit_test/trivia/bloc/trivia_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:trivia/models/trivia.dart' as _i3;
import 'package:trivia/provider/trivia_provider.dart' as _i2;
import 'package:trivia/repository/trivia_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTriviaProvider_0 extends _i1.SmartFake
    implements _i2.TriviaProvider {
  _FakeTriviaProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTrivia_1 extends _i1.SmartFake implements _i3.Trivia {
  _FakeTrivia_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TriviaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTriviaRepository extends _i1.Mock implements _i4.TriviaRepository {
  MockTriviaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TriviaProvider get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakeTriviaProvider_0(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i2.TriviaProvider);
  @override
  _i3.Trivia getTrivia(String? category) => (super.noSuchMethod(
        Invocation.method(
          #getTrivia,
          [category],
        ),
        returnValue: _FakeTrivia_1(
          this,
          Invocation.method(
            #getTrivia,
            [category],
          ),
        ),
      ) as _i3.Trivia);
  @override
  void saveTrivia(_i3.Trivia? trivia) => super.noSuchMethod(
        Invocation.method(
          #saveTrivia,
          [trivia],
        ),
        returnValueForMissingStub: null,
      );
}
