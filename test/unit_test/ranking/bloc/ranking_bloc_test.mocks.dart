// Mocks generated by Mockito 5.4.0 from annotations
// in trivia/test/unit_test/ranking/bloc/ranking_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:trivia/models/trivia.dart' as _i5;
import 'package:trivia/models/user.dart' as _i3;
import 'package:trivia/provider/ranking_provider.dart' as _i2;
import 'package:trivia/repository/ranking_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRankingProvider_0 extends _i1.SmartFake
    implements _i2.RankingProvider {
  _FakeRankingProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RankingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRankingRepository extends _i1.Mock implements _i4.RankingRepository {
  MockRankingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RankingProvider get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakeRankingProvider_0(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i2.RankingProvider);
  @override
  List<_i5.Trivia> getAllTrivias() => (super.noSuchMethod(
        Invocation.method(
          #getAllTrivias,
          [],
        ),
        returnValue: <_i5.Trivia>[],
      ) as List<_i5.Trivia>);
  @override
  Map<String, List<_i5.Trivia>> getAllTriviasByCategory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTriviasByCategory,
          [],
        ),
        returnValue: <String, List<_i5.Trivia>>{},
      ) as Map<String, List<_i5.Trivia>>);
  @override
  _i3.User findUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #findUser,
          [userId],
        ),
        returnValue: _FakeUser_1(
          this,
          Invocation.method(
            #findUser,
            [userId],
          ),
        ),
      ) as _i3.User);
}
